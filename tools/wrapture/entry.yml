version: "0.4.2"
classes:
  - name: "Entry"
    doc: |
      A log entry.

      Entries are the basic element of logging in Stumpless.
    namespace: "stumplesscpp"
    equivalent-struct:
      name: "stumpless_entry"
      includes:
        - "stumpless/entry.h"
    type: "pointer"
    constructors:
      - doc: "Creates an Entry with the given properties."
        wrapped-function:
          name: "vstumpless_new_entry"
          includes: "stumpless/entry.h"
          params:
            - name: "facility"
              doc: |
                The facility code of the event this entry describes.
              type:
                name: "Facility"
                includes: "Facility.hpp"
              value: "static_cast<int>(facility)"
            - name: "severity"
              doc: |
                The severity of the event this entry describes.
              type:
                name: "Severity"
                includes: "Severity.hpp"
              value: "static_cast<int>(severity)"
            - name: "app_name"
              doc: |
                The app_name of the entry. If this is NULL, then it will be
                blank in the entry (a single '-' character).
              type: "const char *"
            - name: "msgid"
              doc: |
                The msgid of the entry. If this is NULL, then it will be
                blank in the entry (a single '-' character).
              type: "const char *"
            - name: "message"
              doc: |
                The message in the entry. This message may contain any format
                specifiers valid in printf. If this is NULL, then it will be
                blank in the entry (no characters). This also means that
                characters such as % need to be escaped as they would be in
                printf.
              type: "const char *"
            - name: "..."
              doc: |
                Substitutions for any format specifiers provided in message. The
                number of substitutions provided must exactly match the number
                of specifiers given.
          return:
            type: "equivalent-struct-pointer"
          use-template: "pointer-return-error-check"
      - doc: "Creates an Entry from a stumpless_entry struct."
        wrapped-function:
          name: "stumpless_copy_entry"
          includes: "stumpless/entry.h"
          params:
            - name: "entry"
              doc: |
                The struct to create this Entry from. The struct will be copied
                during this creation, and so any changes made to it after this
                call will not be reflected in the resulting instance.

                Available since release v1.6.0.
              type:
                name: "struct stumpless_entry *"
                includes: "stumpless/entry.h"
              value: "entry"
          return:
            type: "equivalent-struct-pointer"
          use-template: "pointer-return-error-check"
    destructor:
      doc: |
        Destroys the Entry and frees any memory allocated for it.
      wrapped-function:
        name: "stumpless_destroy_entry_only"
        includes:
          - "stumpless/entry.h"
        params:
          - name: "equivalent-struct-pointer"
    functions:
      - name: "AddElement"
        doc: "Adds an element to an entry."
        params:
          - name: "element"
            doc: "The element to add."
            type: "Element&"
            includes: "Element.hpp"
        return:
          doc: "The modified Entry, to support method chaining."
          type: "self-reference"
        wrapped-function:
          name: "stumpless_add_element"
          includes: "stumpless/entry.h"
          params:
            - value: "equivalent-struct-pointer"
            - value: "element"
              type: "struct stumpless_element *"
          return:
            type: "struct stumpless_entry *"
          use-template: "pointer-return-error-check"
      - name: "AddElement"
        doc: |
          Adds an Element to this Entry.

          Note that duplicate elements are not allowed in RFC 5424, and as such
          attempts to add an Element to an Entry already having one with the
          same name will result in a DuplicateElement exception.
        params:
          - name: "element"
            doc: "A pointer to the element to add."
            type: "Element *"
            includes: "Element.hpp"
        return:
          doc: "The modified Entry, to support method chaining."
          type: "self-reference"
        wrapped-function:
          name: "stumpless_add_element"
          includes: "stumpless/entry.h"
          params:
            - value: "equivalent-struct-pointer"
            - value: "element"
              type: "struct stumpless_element *"
          return:
            type: "struct stumpless_entry *"
          use-template: "pointer-return-error-check"
      - name: "AddElement"
        doc: |
          Creates a new Element and adds it to this Entry.

          Note that duplicate elements are not allowed in RFC 5424, and as such
          attempts to add an element to an entry already having one with the
          same name will result in a DuplicateElement exception.
        params:
          - name: "name"
            doc: "The name of the new Element."
            type: "const char *"
        return:
          doc: "The modified Entry, to support method chaining."
          type: "self-reference"
        wrapped-function:
          name: "stumpless_add_new_element"
          includes: "stumpless/entry.h"
          params:
            - value: "equivalent-struct-pointer"
            - value: "name"
          return:
            type: "struct stumpless_entry *"
          use-template: "pointer-return-error-check"
      - name: "GetElement"
        doc: |
          Gets the Element at the given index in this Entry.

          Available since release v1.6.0.
        params:
          - name: "index"
            doc: "The index of the Element to retrieve."
            type:
              name: "size_t"
              includes: "stddef.h"
        return:
          doc: "The requested Element."
          type:
            name: "Element"
            includes: "Element.hpp"
        wrapped-function:
          name: "stumpless_get_element_by_index"
          includes: "stumpless/entry.h"
          params:
            - value: "equivalent-struct-pointer"
            - value: "index"
      - name: "GetElement"
        doc: |
          Gets the Element with the given name from this Entry.

          Available since release v1.6.0.
        params:
          - name: "name"
            doc: "The name of the Element to retrieve."
            type: "const char *"
        return:
          doc: "The requested Element."
          type:
            name: "Element"
            includes: "Element.hpp"
        wrapped-function:
          name: "stumpless_get_element_by_name"
          includes: "stumpless/entry.h"
          params:
            - value: "equivalent-struct-pointer"
            - value: "name"
      - name: "GetElementIndex"
        doc: |
          Gets the index of the Element with the given name from this Entry.

          Available since release v1.6.0.
        params:
          - name: "name"
            doc: "The name of the Element to retrieve."
            type: "const char *"
        return:
          doc: "The index of the specified Element."
          type:
            name: "size_t"
            includes: "stddef.h"
        wrapped-function:
          name: "stumpless_get_element_index"
          includes: "stumpless/entry.h"
          params:
            - value: "equivalent-struct-pointer"
            - value: "name"
          return:
            type:
              name: "size_t"
              includes: "stddef.h"
      - name: "GetFacility"
        doc: |
          Gets the Facility of this Entry.

          Available since release v1.6.0.
        return:
          doc: "The Facility of this Entry."
          type:
            name: "Facility"
            includes: "Facility.hpp"
        wrapped-function:
          name: "stumpless_get_entry_facility"
          includes: "stumpless/entry.h"
          params:
            - value: "equivalent-struct-pointer"
          return:
            type: "int"
      - name: "GetPrival"
        doc: |
          Gets the prival of this Entry, as defined in RFC 5424.

          Available since release v1.6.0.
        return:
          doc: "The prival of this Entry."
          type: "int"
        wrapped-function:
          name: "stumpless_get_entry_prival"
          includes: "stumpless/entry.h"
          params:
            - value: "equivalent-struct-pointer"
          return:
            type: "int"
      - name: "GetSeverity"
        doc: |
          Gets the Severity of this Entry.

          Available since release v1.6.0.
        return:
          doc: "The Severity of this Entry."
          type:
            name: "Severity"
            includes: "Severity.hpp"
        wrapped-function:
          name: "stumpless_get_entry_severity"
          includes: "stumpless/entry.h"
          params:
            - value: "equivalent-struct-pointer"
          return:
            type: "int"
      - name: "HasElement"
        doc: |
          True if this Entry has an Element with the given name, false
          otherwise.

          Available since release v1.6.0.
        params:
          - name: "name"
            doc: "The name of the Element to look for."
            type: "const char *"
        return:
          doc: "True if the Element is found, false if not."
          type: "bool"
        wrapped-function:
          name: "stumpless_entry_has_element"
          includes: "stumpless/entry.h"
          params:
            - value: "equivalent-struct-pointer"
            - value: "name"
          return:
            type: "bool"
      - name: "SetAppName"
        doc: "Sets the app name for an entry."
        params:
          - name: "app_name"
            doc: |
              The new app_name for the entry as a NULL-terminated string. This
              will be copied in to the entry, and therefore may be modified or
              freed after this call without affecting the entry. If this is
              NULL, then a single '-' character will be used, as specified as
              the NILVALUE in RFC 5424.
            type: "const char *"
        return:
          doc: "The modified Entry, to support method chaining."
          type: "self-reference"
        wrapped-function:
          name: "stumpless_set_entry_app_name"
          includes: "stumpless/entry.h"
          params:
            - value: "equivalent-struct-pointer"
            - value: "app_name"
          return:
            type: "struct stumpless_entry *"
          use-template: "pointer-return-error-check"
      - name: "SetElement"
        doc: |
          Puts the element at the given index in this Entry.

          An Element cannot be set at an index position that does not already
          hold one. If this is attempted, then an IndexOutOfBounds exception is
          thrown.

          Note that duplicate elements are not allowed in RFC 5424, and as such
          attempts to set an Element of an Entry which already contains another
          Element with the same name will result in a DuplicateElement
          exception.

          Available since release v1.6.0.
        params:
          - name: "index"
            doc: "The index to set."
            type:
              name: "size_t"
              includes: "stddef.h"
          - name: "element"
            doc: "The Element to put at index."
            type:
              name: "Element &"
              includes: "Element.hpp"
        return:
          doc: "The modified Entry."
          type: "self-reference"
        wrapped-function:
          name: "stumpless_set_element"
          includes: "stumpless/entry.h"
          params:
            - value: "equivalent-struct-pointer"
            - value: "index"
            - value: "element"
              type: "struct stumpless_element *"
          return:
            type: "struct stumpless_entry *"
          use-template: "pointer-return-error-check"
      - name: "SetFacility"
        doc: |
          Sets the Facility of this Entry.

          Available since release v1.6.0.
        params:
          - name: "facility"
            doc: "The new Facility of this Entry."
            type:
              name: "Facility"
              includes: "Facility.hpp"
        return:
          doc: "The modified Entry."
          type: "self-reference"
        wrapped-function:
          name: "stumpless_set_entry_facility"
          includes: "stumpless/entry.h"
          params:
            - value: "equivalent-struct-pointer"
            - value: "static_cast<int>( facility )"
          return:
            type: "struct stumpless_entry *"
          use-template: "pointer-return-error-check"
      - name: "SetMsgid"
        doc: |
          Sets the msgid for this Entry.

          Available since release v1.6.0.
        params:
          - name: "msgid"
            doc: |
              A NULL-terminated string holding the new msgid. This will be
              copied in to the Entry, and therefore may be modified or freed
              after this call without affecting the entry. If this is NULL,
              then a single '-' character will be used, as specified as the
              NILVALUE in RFC 5424.
            type: "const char *"
        return:
          doc: "The modified Entry."
          type: "self-reference"
        wrapped-function:
          name: "stumpless_set_entry_msgid"
          includes: "stumpless/entry.h"
          params:
            - value: "equivalent-struct-pointer"
            - value: "msgid"
          return:
            type: "struct stumpless_entry *"
          use-template: "pointer-return-error-check"
      - name: "SetMessage"
        doc: "Sets the message of an Entry."
        params:
          - name: "message"
            doc: |
              The new message to set on the entry. The message may contain any
              format specifiers valid in printf. If this is NULL, then it will
              be blank in the entry (no characters). This also means that
              characters such as % need to be escaped as they would be in
              printf.
            type: "const char *"
          - name: "..."
            doc: |
              Substitutions for any format specifiers provided in message. The
              number of substitutions provided must exactly match the number of
              specifiers given.
        return:
          doc: "The modified Entry, to support method chaining."
          type: "self-reference"
        wrapped-function:
          name: "vstumpless_set_entry_message"
          includes:
            - "stumpless/entry.h"
          params:
            - value: "equivalent-struct-pointer"
            - value: "message"
              type: "const char *"
            - value: "..."
          return:
            type: "struct stumpless_entry *"
          use-template: "pointer-return-error-check"
      - name: "SetPriority"
        doc: |
          Sets the Facility and Severity of this Entry.

          Available since release v1.6.0.
        params:
          - name: "facility"
            doc: "The new Facility of this Entry."
            type:
              name: "Facility"
              includes: "Facility.hpp"
          - name: "severity"
            doc: "The new Severity of this Entry."
            type:
              name: "Severity"
              includes: "Severity.hpp"
        return:
          doc: "The modified Entry."
          type: "self-reference"
        wrapped-function:
          name: "stumpless_set_entry_priority"
          includes: "stumpless/entry.h"
          params:
            - value: "equivalent-struct-pointer"
            - value: "static_cast<int>( facility )"
            - value: "static_cast<int>( severity )"
          return:
            type: "struct stumpless_entry *"
          use-template: "pointer-return-error-check"
      - name: "SetPrival"
        doc: |
          Sets the prival of this Entry, as defined in RFC 5424.

          Available since release v1.6.0.
        params:
          - name: "prival"
            doc: "The new prival of this Entry."
            type: "int"
        return:
          doc: "The modified Entry."
          type: "self-reference"
        wrapped-function:
          name: "stumpless_set_entry_prival"
          includes: "stumpless/entry.h"
          params:
            - value: "equivalent-struct-pointer"
            - value: "prival"
          return:
            type: "struct stumpless_entry *"
          use-template: "pointer-return-error-check"
      - name: "SetSeverity"
        doc: |
          Sets the Severity of this Entry.

          Available since release v1.6.0.
        params:
          - name: "severity"
            doc: "The new Severity of this Entry."
            type:
              name: "Severity"
              includes: "Severity.hpp"
        return:
          doc: "The modified Entry."
          type: "self-reference"
        wrapped-function:
          name: "stumpless_set_entry_severity"
          includes: "stumpless/entry.h"
          params:
            - value: "equivalent-struct-pointer"
            - value: "static_cast<int>( severity )"
          return:
            type: "struct stumpless_entry *"
          use-template: "pointer-return-error-check"
      - use-template: "wel-functions"
