#!/usr/bin/env ruby

require 'yaml'
#require 'wrapture'

spec = YAML::load_file ARGV[0]

spec['classes'].each do |class_spec|

  class_name = class_spec['name']
  struct_name = class_spec['equivalent-struct']['name']

  # generating constructor signatures
  members = Array.new
  class_spec['equivalent-struct']['members'].each do |member|
    members << "#{member['type']} #{member['name']}"
  end
  constructor_signature = "#{class_name}( #{members.join ', '} )"

  # generate the header file
  File.open("#{class_name}.hpp", 'w') do |file|
    class_spec['equivalent-struct']['includes'].each do |include|
      file.puts "#include <#{include}>"
    end

    file.puts # line between includes and namespace

    file.puts "namespace #{class_name} {"
    file.puts "  class #{class_name} {"
    file.puts "    private:"
    file.puts "      struct #{struct_name} equivalent;"

    file.puts # line between private and public

    file.puts "    public:"
    file.puts "      #{constructor_signature};"
    file.puts "      #{class_name}( struct #{struct_name} equivalent );"
    file.puts "      #{class_name}( const struct #{struct_name} *equivalent );"

    class_spec['equivalent-struct']['members'].each do |member|
      file.puts "      #{member['type']} Get#{member['name'].capitalize}( void ) const;"
      file.puts "      void Set#{member['name'].capitalize}( #{member['type']} #{member['name']} );"
    end

    class_spec['functions'].each do |function_spec|
      static_modifier = if function_spec['static'] then 'static ' else '' end
      file.puts "      #{static_modifier}#{function_spec['return']} #{function_spec['name']}( void );"
    end

    file.puts '  };' # end of class
    file.puts '}' # end of namespace
  end
  
  # get the complete list of includes for definitions
  definition_includes = Array.new
  definition_includes << "#{class_name}.hpp"
  class_spec['functions'].each do |function_spec|
    definition_includes.concat function_spec['wrapped_function'][includes]
  end
  definition_includes.uniq!

  # generate the definition file
  File.open("#{class_name}.cpp", 'w') do |file|
    file.puts "#include <#{class_name}.hpp>"
    definition_includes.each do |include_file|
      "#include <#{include_file}>"
    end

    file.puts # line between includes and namespace

    file.puts "namespace #{class_name} {"

    file.puts "  #{class_name}::#{constructor_signature} {"
    class_spec['equivalent-struct']['members'].each do |member|
      file.puts "    this->equivalent.#{member['name']} = #{member['name']};"
    end
    file.puts '  }' # end of the constructor

    file.puts # line between basic constructor and struct conversion

    file.puts "  #{class_name}::#{class_name}( struct #{struct_name} equivalent ) {"
    class_spec['equivalent-struct']['members'].each do |member|
      file.puts "    this->equivalent.#{member['name']} = equivalent.#{member['name']};"
    end
    file.puts '  }' # end of struct conversion

    file.puts # line between struct conversion and pointer conversion

    file.puts "  #{class_name}::#{class_name}( const struct #{struct_name} *equivalent ) {"
    class_spec['equivalent-struct']['members'].each do |member|
      file.puts "    this->equivalent.#{member['name']} = equivalent->#{member['name']};"
    end
    file.puts '  }' # end of pointer conversion

    class_spec['equivalent-struct']['members'].each do |member|
      file.puts
      file.puts "  #{member['type']} #{class_name}::Get#{member['name'].capitalize}( void ) const {"
      file.puts "    return this->equivalent.#{member['name']};"
      file.puts '  }'
      file.puts
      file.puts "  void #{class_name}::Set#{member['name'].capitalize}( #{member['type']} #{member['name']} ) {"
      file.puts "    this->equivalent.#{member['name']} = #{member['name']};"
      file.puts '  }'
    end

    class_spec['functions'].each do |function_spec|
      # print the wrapped functions
    end

    file.puts '}' # end of namespace
  end
end
