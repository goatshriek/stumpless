# 1 "src/configuration.c"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "src/configuration.c"
# 1 "/usr/include/stdlib.h" 1 3 4
# 24 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 375 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 385 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 386 "/usr/include/sys/cdefs.h" 2 3 4
# 376 "/usr/include/features.h" 2 3 4
# 399 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4






# 1 "/usr/include/gnu/stubs-32.h" 1 3 4
# 8 "/usr/include/gnu/stubs.h" 2 3 4
# 400 "/usr/include/features.h" 2 3 4
# 25 "/usr/include/stdlib.h" 2 3 4







# 1 "/usr/lib/gcc/i686-pc-linux-gnu/4.8.1/include/stddef.h" 1 3 4
# 212 "/usr/lib/gcc/i686-pc-linux-gnu/4.8.1/include/stddef.h" 3 4
typedef unsigned int size_t;
# 324 "/usr/lib/gcc/i686-pc-linux-gnu/4.8.1/include/stddef.h" 3 4
typedef long int wchar_t;
# 33 "/usr/include/stdlib.h" 2 3 4








# 1 "/usr/include/bits/waitflags.h" 1 3 4
# 42 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/bits/waitstatus.h" 1 3 4
# 64 "/usr/include/bits/waitstatus.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 27 "/usr/include/bits/byteswap.h" 3 4
# 1 "/usr/include/bits/types.h" 1 3 4
# 27 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;




__extension__ typedef signed long long int __int64_t;
__extension__ typedef unsigned long long int __uint64_t;







__extension__ typedef long long int __quad_t;
__extension__ typedef unsigned long long int __u_quad_t;
# 130 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 131 "/usr/include/bits/types.h" 2 3 4


__extension__ typedef __u_quad_t __dev_t;
__extension__ typedef unsigned int __uid_t;
__extension__ typedef unsigned int __gid_t;
__extension__ typedef unsigned long int __ino_t;
__extension__ typedef __u_quad_t __ino64_t;
__extension__ typedef unsigned int __mode_t;
__extension__ typedef unsigned int __nlink_t;
__extension__ typedef long int __off_t;
__extension__ typedef __quad_t __off64_t;
__extension__ typedef int __pid_t;
__extension__ typedef struct { int __val[2]; } __fsid_t;
__extension__ typedef long int __clock_t;
__extension__ typedef unsigned long int __rlim_t;
__extension__ typedef __u_quad_t __rlim64_t;
__extension__ typedef unsigned int __id_t;
__extension__ typedef long int __time_t;
__extension__ typedef unsigned int __useconds_t;
__extension__ typedef long int __suseconds_t;

__extension__ typedef int __daddr_t;
__extension__ typedef int __key_t;


__extension__ typedef int __clockid_t;


__extension__ typedef void * __timer_t;


__extension__ typedef long int __blksize_t;




__extension__ typedef long int __blkcnt_t;
__extension__ typedef __quad_t __blkcnt64_t;


__extension__ typedef unsigned long int __fsblkcnt_t;
__extension__ typedef __u_quad_t __fsblkcnt64_t;


__extension__ typedef unsigned long int __fsfilcnt_t;
__extension__ typedef __u_quad_t __fsfilcnt64_t;


__extension__ typedef int __fsword_t;

__extension__ typedef int __ssize_t;


__extension__ typedef long int __syscall_slong_t;

__extension__ typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


__extension__ typedef int __intptr_t;


__extension__ typedef unsigned int __socklen_t;
# 28 "/usr/include/bits/byteswap.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/bits/byteswap.h" 2 3 4






# 1 "/usr/include/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/bits/byteswap.h" 2 3 4
# 44 "/usr/include/bits/byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 108 "/usr/include/bits/byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "/usr/include/endian.h" 2 3 4
# 65 "/usr/include/bits/waitstatus.h" 2 3 4

union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 43 "/usr/include/stdlib.h" 2 3 4
# 67 "/usr/include/stdlib.h" 3 4
typedef union
  {
    union wait *__uptr;
    int *__iptr;
  } __WAIT_STATUS __attribute__ ((__transparent_union__));
# 95 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 139 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;




extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

# 305 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/sys/types.h" 1 3 4
# 27 "/usr/include/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;
# 60 "/usr/include/sys/types.h" 3 4
typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;
# 98 "/usr/include/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 132 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 57 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 73 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 91 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 103 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 133 "/usr/include/sys/types.h" 2 3 4
# 146 "/usr/include/sys/types.h" 3 4
# 1 "/usr/lib/gcc/i686-pc-linux-gnu/4.8.1/include/stddef.h" 1 3 4
# 147 "/usr/include/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 194 "/usr/include/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 219 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/sys/select.h" 1 3 4
# 30 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/select.h" 1 3 4
# 22 "/usr/include/bits/select.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 23 "/usr/include/bits/select.h" 2 3 4
# 31 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 23 "/usr/include/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 34 "/usr/include/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "/usr/include/time.h" 1 3 4
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };
# 44 "/usr/include/sys/select.h" 2 3 4

# 1 "/usr/include/bits/time.h" 1 3 4
# 30 "/usr/include/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 46 "/usr/include/sys/select.h" 2 3 4


typedef __suseconds_t suseconds_t;





typedef long int __fd_mask;
# 64 "/usr/include/sys/select.h" 3 4
typedef struct
  {






    __fd_mask __fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];


  } fd_set;






typedef __fd_mask fd_mask;
# 96 "/usr/include/sys/select.h" 3 4

# 106 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 118 "/usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 131 "/usr/include/sys/select.h" 3 4

# 220 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/sysmacros.h" 1 3 4
# 29 "/usr/include/sys/sysmacros.h" 3 4


__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 63 "/usr/include/sys/sysmacros.h" 3 4

# 223 "/usr/include/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 270 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 21 "/usr/include/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 22 "/usr/include/bits/pthreadtypes.h" 2 3 4
# 60 "/usr/include/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


union pthread_attr_t
{
  char __size[36];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;
# 81 "/usr/include/bits/pthreadtypes.h" 3 4
typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;





typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;





    int __kind;





    unsigned int __nusers;
    __extension__ union
    {
      int __spins;
      __pthread_slist_t __list;
    };

  } __data;
  char __size[24];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{
# 185 "/usr/include/bits/pthreadtypes.h" 3 4
  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;


    unsigned char __flags;
    unsigned char __shared;
    unsigned char __pad1;
    unsigned char __pad2;
    int __writer;
  } __data;

  char __size[32];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[20];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/sys/types.h" 2 3 4



# 315 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));




extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    unsigned long long int __a;
  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));




extern void cfree (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/i686-pc-linux-gnu/4.8.1/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));






# 492 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 512 "/usr/include/stdlib.h" 3 4


extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 529 "/usr/include/stdlib.h" 3 4





extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));













extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));






extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;

# 577 "/usr/include/stdlib.h" 3 4
extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 605 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 619 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 641 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 662 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 711 "/usr/include/stdlib.h" 3 4





extern int system (const char *__command) ;

# 733 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) ;






typedef int (*__compar_fn_t) (const void *, const void *);
# 751 "/usr/include/stdlib.h" 3 4



extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;



extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
# 770 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;

# 807 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));







extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__)) ;



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__));








extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 895 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;
# 947 "/usr/include/stdlib.h" 3 4
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


# 1 "/usr/include/bits/stdlib-float.h" 1 3 4
# 952 "/usr/include/stdlib.h" 2 3 4
# 964 "/usr/include/stdlib.h" 3 4

# 2 "src/configuration.c" 2

# 1 "include/configuration.h" 1



# 1 "include/type.h" 1



# 1 "/usr/lib/gcc/i686-pc-linux-gnu/4.8.1/include-fixed/limits.h" 1 3 4
# 34 "/usr/lib/gcc/i686-pc-linux-gnu/4.8.1/include-fixed/limits.h" 3 4
# 1 "/usr/lib/gcc/i686-pc-linux-gnu/4.8.1/include-fixed/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/i686-pc-linux-gnu/4.8.1/include-fixed/limits.h" 1 3 4
# 168 "/usr/lib/gcc/i686-pc-linux-gnu/4.8.1/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 144 "/usr/include/limits.h" 3 4
# 1 "/usr/include/bits/posix1_lim.h" 1 3 4
# 160 "/usr/include/bits/posix1_lim.h" 3 4
# 1 "/usr/include/bits/local_lim.h" 1 3 4
# 38 "/usr/include/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/bits/local_lim.h" 2 3 4
# 161 "/usr/include/bits/posix1_lim.h" 2 3 4
# 145 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/bits/posix2_lim.h" 1 3 4
# 149 "/usr/include/limits.h" 2 3 4
# 169 "/usr/lib/gcc/i686-pc-linux-gnu/4.8.1/include-fixed/limits.h" 2 3 4
# 8 "/usr/lib/gcc/i686-pc-linux-gnu/4.8.1/include-fixed/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/i686-pc-linux-gnu/4.8.1/include-fixed/limits.h" 2 3 4
# 5 "include/type.h" 2
# 1 "/usr/include/stdio.h" 1 3 4
# 29 "/usr/include/stdio.h" 3 4




# 1 "/usr/lib/gcc/i686-pc-linux-gnu/4.8.1/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4
# 44 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 64 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 74 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 32 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/i686-pc-linux-gnu/4.8.1/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 82 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 33 "/usr/include/libio.h" 2 3 4
# 50 "/usr/include/libio.h" 3 4
# 1 "/usr/lib/gcc/i686-pc-linux-gnu/4.8.1/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/i686-pc-linux-gnu/4.8.1/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 51 "/usr/include/libio.h" 2 3 4
# 145 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 155 "/usr/include/libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 178 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 246 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 294 "/usr/include/libio.h" 3 4
  __off64_t _offset;
# 303 "/usr/include/libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 339 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);
# 391 "/usr/include/libio.h" 3 4
extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 435 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 465 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 75 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 108 "/usr/include/stdio.h" 3 4


typedef _G_fpos_t fpos_t;




# 164 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 165 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));




extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));








extern FILE *tmpfile (void) ;
# 209 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;





extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;
# 227 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 252 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 266 "/usr/include/stdio.h" 3 4






extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 295 "/usr/include/stdio.h" 3 4

# 306 "/usr/include/stdio.h" 3 4
extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__)) ;
# 319 "/usr/include/stdio.h" 3 4
extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__)) ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));








extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));





extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));

# 412 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
# 443 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__ , __leaf__))

                      ;
# 463 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 494 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 522 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 550 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 561 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 594 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 638 "/usr/include/stdio.h" 3 4
extern char *gets (char *__s) __attribute__ ((__deprecated__));


# 665 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 737 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 773 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 792 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 815 "/usr/include/stdio.h" 3 4

# 824 "/usr/include/stdio.h" 3 4


extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;








extern void perror (const char *__s);






# 1 "/usr/include/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];
# 854 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
# 873 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));
# 913 "/usr/include/stdio.h" 3 4
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 943 "/usr/include/stdio.h" 3 4

# 6 "include/type.h" 2

# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4








# 1 "/usr/lib/gcc/i686-pc-linux-gnu/4.8.1/include/stddef.h" 1 3 4
# 38 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/time.h" 1 3 4
# 42 "/usr/include/time.h" 2 3 4
# 131 "/usr/include/time.h" 3 4


struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;
# 186 "/usr/include/time.h" 3 4



extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));


extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));

# 221 "/usr/include/time.h" 3 4
# 1 "/usr/include/xlocale.h" 1 3 4
# 27 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 222 "/usr/include/time.h" 2 3 4

extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     __locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));
# 236 "/usr/include/time.h" 3 4



extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));





extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));





extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));







extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) __attribute__ ((__nothrow__ , __leaf__));
# 319 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 334 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));


extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));
# 430 "/usr/include/time.h" 3 4

# 8 "include/type.h" 2


enum StumplessHTTPMethod;
enum StumplessSortingMethod;
enum StumplessStatusCode;

struct StumplessBoolean;
struct StumplessBooleanFormat;
struct StumplessByteList;
struct StumplessConfiguration;
struct StumplessEntry;
struct StumplessEntryAttribute;
struct StumplessEvent;
struct StumplessEventAttribute;
struct StumplessFileConfiguration;
struct StumplessFormattedOutput;
struct StumplessHTTConfiguration;
struct StumplessLevel;
struct StumplessLoggingProfile;
struct StumplessOutputProfile;
struct StumplessSortingConfiguration;
struct StumplessStringConfiguration;
struct StumplessThreadingConfiguration;
union StumplessType;
struct StumplessValue;
struct StumplessValueList;
struct StumplessValueListNode;
struct StumplessValueProfile;


typedef enum StumplessHTTPMethod StumplessHTTPMethod;
typedef enum StumplessSortingMethod StumplessSortingMethod;
typedef enum StumplessStatusCode StumplessStatusCode;

typedef struct StumplessBoolean StumplessBoolean;
typedef struct StumplessBooleanFormat StumplessBooleanFormat;
typedef struct StumplessByteList StumplessByteList;
typedef struct StumplessConfiguration StumplessConfiguration;
typedef struct StumplessEntry StumplessEntry;
typedef struct StumplessEntryAttribute StumplessEntryAttribute;
typedef struct StumplessEvent StumplessEvent;
typedef struct StumplessEventAttribute StumplessEventAttribute;
typedef struct StumplessFileConfiguration StumplessFileConfiguration;
typedef struct StumplessFormattedOutput StumplessFormattedOutput;
typedef struct StumplessHTTPConfiguration StumplessHTTPConfiguration;
typedef struct StumplessLevel StumplessLevel;
typedef struct StumplessLoggingProfile StumplessLoggingProfile;
typedef struct StumplessOutputProfile StumplessOutputProfile;
typedef struct StumplessSortingConfiguration StumplessSortingConfiguration;
typedef struct StumplessStringConfiguration StumplessStringConfiguration;
typedef struct StumplessThreadingConfiguration StumplessThreadingConfiguration;
typedef union StumplessType StumplessType;
typedef struct StumplessValue StumplessValue;
typedef struct StumplessValueList StumplessValueList;
typedef struct StumplessValueListNode StumplessValueListNode;
typedef struct StumplessValueProfile StumplessValueProfile;


typedef unsigned char StumplessByte;

enum StumplessHTTPMethod {
  STUMPLESS_DELETE,
  STUMPLESS_GET,
  STUMPLESS_POST,
  STUMPLESS_PUT
};

enum StumplessSortingMethod {
  STUMPLESS_BUBBLE_SORT,
  STUMPLESS_CUSTOM_SORT,
  STUMPLESS_INSERTION_SORT,
  STUMPLESS_MERGE_SORT,
  STUMPLESS_QUICK_SORT,
  STUMPLESS_SHELL_SORT
};

enum StumplessStatusCode {
  STUMPLESS_SUCCESS = 0,
  STUMPLESS_FAILURE,
  STUMPLESS_EMPTY_ARGUMENT,
  STUMPLESS_INCOMPATIBLE_ARGUMENTS,
  STUMPLESS_FILE_FAILURE,
  STUMPLESS_FILE_CLOSE_FAILURE,
  STUMPLESS_FILE_OPEN_FAILURE,
  STUMPLESS_FILE_READ_FAILURE,
  STUMPLESS_FILE_WRITE_FAILURE,
  STUMPLESS_INCORRECT_FILE_SIGNATURE,
  STUMPLESS_MEMORY_ALLOCATION_FAILURE,
  STUMPLESS_PARSE_FAILURE,
  STUMPLESS_STRING_WRITE_FAILURE,
  STUMPLESS_MALFORMED_STRUCTURE,
  STUMPLESS_INCORRECT_INTERNAL_STATE
};

struct StumplessBoolean {
  short value;
  StumplessBooleanFormat * format;
};

struct StumplessBooleanFormat {
  const char * true_description;
  const char * false_description;
};

struct StumplessByteList {
  StumplessByte * bytes;
  unsigned byte_count;
};

struct StumplessConfiguration {
  StumplessFileConfiguration * file;
  StumplessHTTPConfiguration * http;
  unsigned logging_profile_count;
  StumplessLoggingProfile ** logging_profiles;
  unsigned output_profile_count;
  StumplessOutputProfile ** output_profiles;
  StumplessSortingConfiguration * sorting;
  StumplessStringConfiguration * string;
  StumplessThreadingConfiguration * threading;
  unsigned value_profile_count;
  StumplessValueProfile ** value_profiles;
};

struct StumplessEntry {
  const char * description;
  StumplessEvent * event;
  StumplessEntryAttribute ** attributes;
  unsigned attribute_count;
};

struct StumplessEntryAttribute {
  StumplessEventAttribute * event_attribute;
  StumplessValue * value;
};

struct StumplessEvent {
  const char * name;
  StumplessLevel * level;
  StumplessEventAttribute ** attributes;
  unsigned attribute_count;
};

struct StumplessEventAttribute {
  const char * name;
  StumplessValue * default_value;
};

struct StumplessFileConfiguration {
  FILE * current_file;
};

struct StumplessFormattedOutput {
  StumplessType * data;
  StumplessOutputProfile * profile;
};

struct StumplessHTTPConfiguration {
  StumplessHTTPMethod method;
};

struct StumplessLevel {
  unsigned value;
  const char * name;
};

struct StumplessLoggingProfile {
  const char * name;
  StumplessStatusCode ( *output_function )( StumplessFormattedOutput * );
};

struct StumplessOutputProfile {
  StumplessStatusCode ( *into_buffer )( StumplessFormattedOutput * );
  StumplessStatusCode ( *into_http )( StumplessFormattedOutput * );
  StumplessStatusCode ( *into_mysql )( StumplessFormattedOutput * );
  StumplessStatusCode ( *into_stream )( StumplessFormattedOutput * );
  StumplessStatusCode ( *into_string )( StumplessFormattedOutput * );
  StumplessStatusCode ( *into_tcp )( StumplessFormattedOutput * );
  unsigned short ( *is_empty )( StumplessFormattedOutput * );
  const char * name;
  char * ( *to_string )( StumplessFormattedOutput * );
};

struct StumplessSortingConfiguration {
  StumplessSortingMethod entry_method;
  StumplessSortingMethod log_method;
  unsigned short ascending;
};

struct StumplessStringConfiguration {
  size_t buffer_size;
};

struct StumplessThreadingConfiguration {
  unsigned short enabled;
};

union StumplessType {
  unsigned short u_s;
  const unsigned short * u_s_p;
  signed short s;
  const signed short * s_p;
  unsigned int u_i;
  const unsigned int * u_i_p;
  signed int i;
  const signed int * i_p;
  unsigned long u_l;
  const unsigned long * u_l_p;
  signed long l;
  const signed long * l_p;
  unsigned long long u_l_l;
  const unsigned long long * u_l_l_p;
  signed long long l_l;
  const signed long long * l_l_p;
  char c;
  const char * c_p;
  signed char s_c;
  const signed char * s_c_p;
  unsigned char u_c;
  const unsigned char * u_c_p;
  float f;
  const float * f_p;
  double d;
  const double * d_p;
  long double l_d;
  const long double * l_d_p;
  const void * v_p;
};

struct StumplessValue {
  StumplessType * data;
  const char * format;
  unsigned length;
  StumplessValueProfile * profile;
};

struct StumplessValueList {
  StumplessValueListNode * first;
  StumplessValueListNode * last;
};

struct StumplessValueListNode {
  StumplessValue * value;
  StumplessValueListNode * next;
};

struct StumplessValueProfile {
  StumplessStatusCode ( *into_string )( char *, StumplessValue * );
  const char * name;
  StumplessFormattedOutput * ( *to_binary )( StumplessValue * );
  StumplessFormattedOutput * ( *to_csv )( StumplessValue * );
  StumplessFormattedOutput * ( *to_json )( StumplessValue * );
  char * ( *to_string )( StumplessValue * );
  StumplessFormattedOutput * ( *to_text )( StumplessValue * );
  StumplessValueList * ( *to_value_list )( StumplessValue * );
  StumplessFormattedOutput * ( *to_xml )( StumplessValue * );
};
# 5 "include/configuration.h" 2

StumplessStatusCode
StumplessAddLoggingProfile( StumplessLoggingProfile * );

StumplessStatusCode
StumplessAddOutputProfile( StumplessOutputProfile * );

StumplessStatusCode
StumplessAddValueProfile( StumplessValueProfile * );

StumplessLoggingProfile *
StumplessFindLoggingProfileByName( const char * );

StumplessOutputProfile *
StumplessFindOutputProfileByName( const char * );

StumplessValueProfile *
StumplessFindValueProfileByName( const char * );

StumplessConfiguration *
StumplessGetConfiguration( void );

StumplessStatusCode
StumplessInitializeConfiguration( void );

StumplessStatusCode
StumplessInitializeLoggingProfile( void );

StumplessStatusCode
StumplessInitializeOutputProfiles( void );

StumplessStatusCode
StumplessInitializeValueProfiles( void );

StumplessStatusCode
StumplessSetConfiguration( StumplessConfiguration * );
# 4 "src/configuration.c" 2
# 1 "include/formatted_output.h" 1





unsigned short
StumplessBinaryFormattedOutputIsEmpty( StumplessFormattedOutput * );

char *
StumplessBinaryFormattedOutputToString( StumplessFormattedOutput * );

unsigned short
StumplessCSVFormattedOutputIsEmpty( StumplessFormattedOutput * );

char *
StumplessCSVFormattedOutputToString( StumplessFormattedOutput * );

unsigned short
StumplessFormattedOutputIsEmpty( StumplessFormattedOutput * );

char *
StumplessFormattedOutputToString( StumplessFormattedOutput * );

unsigned short
StumplessJSONFormattedOutputIsEmpty( StumplessFormattedOutput * );

char *
StumplessJSONFormattedOutputToString( StumplessFormattedOutput * );

unsigned short
StumplessTextFormattedOutputIsEmpty( StumplessFormattedOutput * );

char *
StumplessTextFormattedOutputToString( StumplessFormattedOutput * );

unsigned short
StumplessXMLFormattedOutputIsEmpty( StumplessFormattedOutput * );

char *
StumplessXMLFormattedOutputToString( StumplessFormattedOutput * );
# 5 "src/configuration.c" 2
# 1 "include/status_checker.h" 1
# 6 "src/configuration.c" 2
# 1 "include/text_formatter.h" 1





StumplessFormattedOutput *
StumplessEntryToText( StumplessEntry * );

StumplessFormattedOutput *
StumplessEntryAttributeToText( StumplessEntryAttribute * );

StumplessFormattedOutput *
StumplessEntryAttributeListToText( StumplessEntry * );

StumplessFormattedOutput *
StumplessEntrySummaryToText( StumplessEntry * );

StumplessFormattedOutput *
StumplessEventToText( StumplessEvent * );

StumplessFormattedOutput *
StumplessEventAttributeToText( StumplessEventAttribute * );

StumplessFormattedOutput *
StumplessEventAttributeListToText( StumplessEvent * );

StumplessFormattedOutput *
StumplessEventSummaryToText( StumplessEvent * );

StumplessFormattedOutput *
StumplessGenericArrayValueToText( StumplessValue * );

StumplessFormattedOutput *
StumplessGenericValueToText( StumplessValue * );

StumplessFormattedOutput *
StumplessLevelToText( StumplessLevel * );
# 7 "src/configuration.c" 2

# 1 "include/value.h" 1





StumplessValueList *
StumplessBooleanArrayValueToValueList( StumplessValue * );

StumplessStatusCode
StumplessBooleanValueIntoString( char *, StumplessValue * );

char *
StumplessBooleanValueToString( StumplessValue * );

StumplessValueList *
StumplessCharArrayValueToValueList( StumplessValue * );

StumplessStatusCode
StumplessCharValueIntoString( char *, StumplessValue * );

char *
StumplessCharValueToString( StumplessValue * );

void
StumplessDestroyValue( StumplessValue * );

StumplessValueList *
StumplessDoubleArrayValueToValueList( StumplessValue * );

StumplessStatusCode
StumplessDoubleValueIntoString( char *, StumplessValue * );

char *
StumplessDoubleValueToString( StumplessValue * );

StumplessValueList *
StumplessFloatArrayValueToValueList( StumplessValue * );

StumplessStatusCode
StumplessFloatValueIntoString( char *, StumplessValue * );

char *
StumplessFloatValueToString( StumplessValue * );

StumplessValueList *
StumplessGenericValueToValueList( StumplessValue * );

StumplessValueList *
StumplessIntArrayValueToValueList( StumplessValue * );

StumplessStatusCode
StumplessIntValueIntoString( char *, StumplessValue * );

char *
StumplessIntValueToString( StumplessValue * );

StumplessValueList *
StumplessLongArrayValueToValueList( StumplessValue * );

StumplessStatusCode
StumplessLongValueIntoString( char *, StumplessValue * );

char *
StumplessLongValueToString( StumplessValue * );

StumplessValueList *
StumplessLongDoubleArrayValueToValueList( StumplessValue * );

StumplessStatusCode
StumplessLongDoubleValueIntoString( char *, StumplessValue * );

char *
StumplessLongDoubleValueToString( StumplessValue * );

StumplessValueList *
StumplessLongLongArrayValueToValueList( StumplessValue * );

StumplessStatusCode
StumplessLongLongValueIntoString( char *, StumplessValue * );

char *
StumplessLongLongValueToString( StumplessValue * );

StumplessValueList *
StumplessShortArrayValueToValueList( StumplessValue * );

StumplessStatusCode
StumplessShortValueIntoString( char *, StumplessValue * );

char *
StumplessShortValueToString( StumplessValue * );

StumplessValueList *
StumplessSignedCharArrayValueToValueList( StumplessValue * );

StumplessStatusCode
StumplessSignedCharValueIntoString( char *, StumplessValue * );

char *
StumplessSignedCharValueToString( StumplessValue * );

StumplessValueList *
StumplessStringArrayValueToValueList( StumplessValue * );

StumplessStatusCode
StumplessStringValueIntoString( char *, StumplessValue * );

char *
StumplessStringValueToString( StumplessValue * );

StumplessValueList *
StumplessUnsignedCharArrayValueToValueList( StumplessValue * );

StumplessStatusCode
StumplessUnsignedCharValueIntoString( char *, StumplessValue * );

char *
StumplessUnsignedCharValueToString( StumplessValue * );

StumplessValueList *
StumplessUnsignedIntArrayValueToValueList( StumplessValue * );

StumplessStatusCode
StumplessUnsignedIntValueIntoString( char *, StumplessValue * );

char *
StumplessUnsignedIntValueToString( StumplessValue * );

StumplessValueList *
StumplessUnsignedLongArrayValueToValueList( StumplessValue * );

StumplessStatusCode
StumplessUnsignedLongValueIntoString( char *, StumplessValue * );

char *
StumplessUnsignedLongValueToString( StumplessValue * );

StumplessValueList *
StumplessUnsignedLongLongArrayValueToValueList( StumplessValue * );

StumplessStatusCode
StumplessUnsignedLongLongValueIntoString( char *, StumplessValue * );

char *
StumplessUnsignedLongLongValueToString( StumplessValue * );

StumplessValueList *
StumplessUnsignedShortArrayValueToValueList( StumplessValue * );

StumplessStatusCode
StumplessUnsignedShortValueIntoString( char *, StumplessValue * );

char *
StumplessUnsignedShortValueToString( StumplessValue * );

StumplessStatusCode
StumplessValueIntoString( char *, StumplessValue * );

StumplessStatusCode
StumplessValueIntoString( char *, StumplessValue * );

char *
StumplessValueToString( StumplessValue * );
# 9 "src/configuration.c" 2
# 55 "src/configuration.c"
static StumplessConfiguration * configuration = ((void *)0);


static unsigned logging_profile_array_capacity = 0;
static unsigned output_profile_array_capacity = 0;
static unsigned value_profile_array_capacity = 0;

StumplessStatusCode
StumplessAddLoggingProfile( StumplessLoggingProfile * profile )
{
  if( configuration == ((void *)0) )
    StumplessInitializeConfiguration();

  unsigned index = configuration->logging_profile_count;

  configuration->logging_profiles[index] = profile;
  configuration->logging_profile_count++;

  return STUMPLESS_SUCCESS;
}

StumplessStatusCode
StumplessAddOutputProfile( StumplessOutputProfile * profile )
{
  if( configuration == ((void *)0) )
    StumplessInitializeConfiguration();

  unsigned index = configuration->output_profile_count;

  configuration->output_profiles[index] = profile;
  configuration->output_profile_count++;

  return STUMPLESS_SUCCESS;
}

StumplessStatusCode
StumplessAddValueProfile( StumplessValueProfile * profile )
{
  if( configuration == ((void *)0) )
    StumplessInitializeConfiguration();

  unsigned index = configuration->value_profile_count;

  configuration->value_profiles[index] = profile;
  configuration->value_profile_count++;

  return STUMPLESS_SUCCESS;
}

StumplessLoggingProfile *
StumplessFindLoggingProfileByName( const char * name )
{
  if( configuration == ((void *)0) )
    StumplessInitializeConfiguration();

  unsigned i;
  for( i = 0; i < configuration->logging_profile_count; i++ )
    if( strcmp( configuration->logging_profiles[i]->name, name ) == 0 )
      return configuration->logging_profiles[i];

  return ((void *)0);
}

StumplessOutputProfile *
StumplessFindOutputProfileByName( const char * name )
{
  if( configuration == ((void *)0) )
    StumplessInitializeConfiguration();

  unsigned i;
  for( i = 0; i < configuration->output_profile_count; i++ )
    if( strcmp( configuration->output_profiles[i]->name, name ) == 0 )
      return configuration->output_profiles[i];

  return ((void *)0);
}

StumplessValueProfile *
StumplessFindValueProfileByName( const char * name )
{
  if( configuration == ((void *)0) )
    StumplessInitializeConfiguration();

  unsigned i;
  for( i = 0; i < configuration->value_profile_count; i++ )
    if( strcmp( configuration->value_profiles[i]->name, name ) == 0 )
      return configuration->value_profiles[i];

  return ((void *)0);
}

StumplessConfiguration *
StumplessGetConfiguration( void )
{
  if( configuration == ((void *)0) )
    if( (StumplessInitializeConfiguration()) != STUMPLESS_SUCCESS ){ return ((void *)0); }

  return configuration;
}

StumplessStatusCode
StumplessInitializeConfiguration( void )
{
  configuration = malloc( sizeof( StumplessConfiguration ) );
  if( configuration == ((void *)0) )
    return STUMPLESS_MEMORY_ALLOCATION_FAILURE;

  size_t required_size = sizeof( StumplessFileConfiguration );
  configuration->file = malloc( required_size );
  if( configuration->file == ((void *)0) )
    return STUMPLESS_MEMORY_ALLOCATION_FAILURE;

  required_size = sizeof( StumplessHTTPConfiguration );
  configuration->http = malloc( required_size );
  if( configuration->http == ((void *)0) )
    return STUMPLESS_MEMORY_ALLOCATION_FAILURE;

  required_size = sizeof( StumplessThreadingConfiguration );
  configuration->threading = malloc( required_size );
  if( configuration->threading == ((void *)0) )
    return STUMPLESS_MEMORY_ALLOCATION_FAILURE;

  required_size = sizeof( StumplessSortingConfiguration );
  configuration->sorting = malloc( required_size );
  if( configuration->sorting == ((void *)0) )
    return STUMPLESS_MEMORY_ALLOCATION_FAILURE;

  required_size = sizeof( StumplessStringConfiguration );
  configuration->string = malloc( required_size );
  if( configuration->string == ((void *)0) )
    return STUMPLESS_MEMORY_ALLOCATION_FAILURE;
  configuration->string->buffer_size = 100;

  StumplessStatusCode status;

  status = StumplessInitializeLoggingProfiles();
  if( (status) != STUMPLESS_SUCCESS ){ return status; }

  status = StumplessInitializeOutputProfiles();
  if( (status) != STUMPLESS_SUCCESS ){ return status; }

  return StumplessInitializeValueProfiles();
}

StumplessStatusCode
StumplessInitializeLoggingProfiles( void )
{
  if( configuration == ((void *)0) )
    return STUMPLESS_INCORRECT_INTERNAL_STATE;

  configuration->logging_profile_count = 0;

  logging_profile_array_capacity = 100;
  size_t profile_size = sizeof( StumplessLoggingProfile );
  size_t array_size = logging_profile_array_capacity * profile_size;

  configuration->logging_profiles = malloc( array_size );
  if( configuration->logging_profiles == ((void *)0) )
    return STUMPLESS_MEMORY_ALLOCATION_FAILURE;

  return STUMPLESS_SUCCESS;
}

StumplessStatusCode
StumplessInitializeOutputProfiles( void )
{
  if( configuration == ((void *)0) )
    return STUMPLESS_INCORRECT_INTERNAL_STATE;

  configuration->output_profile_count = 0;

  output_profile_array_capacity = 100;
  size_t array_size;
  array_size = output_profile_array_capacity * sizeof( StumplessOutputProfile );

  configuration->output_profiles = malloc( array_size );
  if( configuration->output_profiles == ((void *)0) )
    return STUMPLESS_MEMORY_ALLOCATION_FAILURE;

  StumplessOutputProfile * profile;

  profile = malloc( sizeof( StumplessOutputProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_buffer = ((void *)0); profile->into_http = ((void *)0); profile->into_mysql = ((void *)0); profile->into_stream = ((void *)0); profile->into_string = ((void *)0); profile->into_tcp = ((void *)0); profile->is_empty = &StumplessBinaryFormattedOutputIsEmpty; profile->name = "binary"; profile->to_string = &StumplessBinaryFormattedOutputToString; StumplessAddOutputProfile( profile );
  profile = malloc( sizeof( StumplessOutputProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_buffer = ((void *)0); profile->into_http = ((void *)0); profile->into_mysql = ((void *)0); profile->into_stream = ((void *)0); profile->into_string = ((void *)0); profile->into_tcp = ((void *)0); profile->is_empty = &StumplessCSVFormattedOutputIsEmpty; profile->name = "csv"; profile->to_string = &StumplessCSVFormattedOutputToString; StumplessAddOutputProfile( profile );
  profile = malloc( sizeof( StumplessOutputProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_buffer = ((void *)0); profile->into_http = ((void *)0); profile->into_mysql = ((void *)0); profile->into_stream = ((void *)0); profile->into_string = ((void *)0); profile->into_tcp = ((void *)0); profile->is_empty = &StumplessJSONFormattedOutputIsEmpty; profile->name = "json"; profile->to_string = &StumplessJSONFormattedOutputToString; StumplessAddOutputProfile( profile );
  profile = malloc( sizeof( StumplessOutputProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_buffer = ((void *)0); profile->into_http = ((void *)0); profile->into_mysql = ((void *)0); profile->into_stream = ((void *)0); profile->into_string = ((void *)0); profile->into_tcp = ((void *)0); profile->is_empty = &StumplessTextFormattedOutputIsEmpty; profile->name = "text"; profile->to_string = &StumplessTextFormattedOutputToString; StumplessAddOutputProfile( profile );
  profile = malloc( sizeof( StumplessOutputProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_buffer = ((void *)0); profile->into_http = ((void *)0); profile->into_mysql = ((void *)0); profile->into_stream = ((void *)0); profile->into_string = ((void *)0); profile->into_tcp = ((void *)0); profile->is_empty = &StumplessXMLFormattedOutputIsEmpty; profile->name = "xml"; profile->to_string = &StumplessXMLFormattedOutputToString; StumplessAddOutputProfile( profile );

  return STUMPLESS_SUCCESS;
}

StumplessStatusCode
StumplessInitializeValueProfiles( void )
{
  if( configuration == ((void *)0) )
    return STUMPLESS_INCORRECT_INTERNAL_STATE;

  configuration->value_profile_count = 0;

  value_profile_array_capacity = 100;
  size_t array_size;
  array_size = value_profile_array_capacity * sizeof( StumplessValueProfile );

  configuration->value_profiles = malloc( array_size );
  if( configuration->value_profiles == ((void *)0) )
    return STUMPLESS_MEMORY_ALLOCATION_FAILURE;

  StumplessValueProfile * profile;

  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = ((void *)0); profile->name = "boolean array"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = ((void *)0); profile->to_text = &StumplessGenericArrayValueToText; profile->to_value_list = &StumplessBooleanArrayValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = ((void *)0); profile->name = "char array"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = ((void *)0); profile->to_text = &StumplessGenericArrayValueToText; profile->to_value_list = &StumplessCharArrayValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = ((void *)0); profile->name = "float array"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = ((void *)0); profile->to_text = &StumplessGenericArrayValueToText; profile->to_value_list = &StumplessFloatArrayValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = ((void *)0); profile->name = "aouble array"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = ((void *)0); profile->to_text = &StumplessGenericArrayValueToText; profile->to_value_list = &StumplessDoubleArrayValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = ((void *)0); profile->name = "int array"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = ((void *)0); profile->to_text = &StumplessGenericArrayValueToText; profile->to_value_list = &StumplessIntArrayValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = ((void *)0); profile->name = "long array"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = ((void *)0); profile->to_text = &StumplessGenericArrayValueToText; profile->to_value_list = &StumplessLongArrayValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = ((void *)0); profile->name = "long double array"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = ((void *)0); profile->to_text = &StumplessGenericArrayValueToText; profile->to_value_list = &StumplessLongDoubleArrayValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = ((void *)0); profile->name = "long long array"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = ((void *)0); profile->to_text = &StumplessGenericArrayValueToText; profile->to_value_list = &StumplessLongLongArrayValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = ((void *)0); profile->name = "short array"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = ((void *)0); profile->to_text = &StumplessGenericArrayValueToText; profile->to_value_list = &StumplessShortArrayValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = ((void *)0); profile->name = "signed char array"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = ((void *)0); profile->to_text = &StumplessGenericArrayValueToText; profile->to_value_list = &StumplessSignedCharArrayValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = ((void *)0); profile->name = "string array"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = ((void *)0); profile->to_text = &StumplessGenericArrayValueToText; profile->to_value_list = &StumplessStringArrayValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = ((void *)0); profile->name = "unsigned char array"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = ((void *)0); profile->to_text = &StumplessGenericArrayValueToText; profile->to_value_list = &StumplessUnsignedCharArrayValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = ((void *)0); profile->name = "unsigned int array"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = ((void *)0); profile->to_text = &StumplessGenericArrayValueToText; profile->to_value_list = &StumplessUnsignedIntArrayValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = ((void *)0); profile->name = "unsigned long array"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = ((void *)0); profile->to_text = &StumplessGenericArrayValueToText; profile->to_value_list = &StumplessUnsignedLongArrayValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = ((void *)0); profile->name = "unsigned long long array"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = ((void *)0); profile->to_text = &StumplessGenericArrayValueToText; profile->to_value_list = &StumplessUnsignedLongLongArrayValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = ((void *)0); profile->name = "unsigned short array"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = ((void *)0); profile->to_text = &StumplessGenericArrayValueToText; profile->to_value_list = &StumplessUnsignedShortArrayValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );

  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = &StumplessBooleanValueIntoString; profile->name = "boolean"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = &StumplessBooleanValueToString; profile->to_text = &StumplessGenericValueToText; profile->to_value_list = &StumplessGenericValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = &StumplessCharValueIntoString; profile->name = "char"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = &StumplessCharValueToString; profile->to_text = &StumplessGenericValueToText; profile->to_value_list = &StumplessGenericValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = &StumplessFloatValueIntoString; profile->name = "float"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = &StumplessFloatValueToString; profile->to_text = &StumplessGenericValueToText; profile->to_value_list = &StumplessGenericValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = &StumplessDoubleValueIntoString; profile->name = "double"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = &StumplessDoubleValueToString; profile->to_text = &StumplessGenericValueToText; profile->to_value_list = &StumplessGenericValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = &StumplessIntValueIntoString; profile->name = "int"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = &StumplessIntValueToString; profile->to_text = &StumplessGenericValueToText; profile->to_value_list = &StumplessGenericValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = &StumplessLongValueIntoString; profile->name = "long"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = &StumplessLongValueToString; profile->to_text = &StumplessGenericValueToText; profile->to_value_list = &StumplessGenericValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = &StumplessLongDoubleValueIntoString; profile->name = "long double"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = &StumplessLongDoubleValueToString; profile->to_text = &StumplessGenericValueToText; profile->to_value_list = &StumplessGenericValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = &StumplessLongLongValueIntoString; profile->name = "long long"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = &StumplessLongLongValueToString; profile->to_text = &StumplessGenericValueToText; profile->to_value_list = &StumplessGenericValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = &StumplessShortValueIntoString; profile->name = "short"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = &StumplessShortValueToString; profile->to_text = &StumplessGenericValueToText; profile->to_value_list = &StumplessGenericValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = &StumplessSignedCharValueIntoString; profile->name = "signed char"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = &StumplessSignedCharValueToString; profile->to_text = &StumplessGenericValueToText; profile->to_value_list = &StumplessGenericValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = &StumplessStringValueIntoString; profile->name = "string"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = &StumplessStringValueToString; profile->to_text = &StumplessGenericValueToText; profile->to_value_list = &StumplessGenericValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = &StumplessUnsignedCharValueIntoString; profile->name = "unsigned char"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = &StumplessUnsignedCharValueToString; profile->to_text = &StumplessGenericValueToText; profile->to_value_list = &StumplessGenericValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = &StumplessUnsignedIntValueIntoString; profile->name = "unsigned int"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = &StumplessUnsignedIntValueToString; profile->to_text = &StumplessGenericValueToText; profile->to_value_list = &StumplessGenericValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = &StumplessUnsignedLongValueIntoString; profile->name = "unsigned long"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = &StumplessUnsignedLongValueToString; profile->to_text = &StumplessGenericValueToText; profile->to_value_list = &StumplessGenericValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = &StumplessUnsignedLongLongValueIntoString; profile->name = "unsigned long long"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = &StumplessUnsignedLongLongValueToString; profile->to_text = &StumplessGenericValueToText; profile->to_value_list = &StumplessGenericValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );
  profile = malloc( sizeof( StumplessValueProfile ) ); if( profile == ((void *)0) ) return STUMPLESS_MEMORY_ALLOCATION_FAILURE; profile->into_string = &StumplessUnsignedShortValueIntoString; profile->name = "unsigned short"; profile->to_binary = ((void *)0); profile->to_csv = ((void *)0); profile->to_json = ((void *)0); profile->to_string = &StumplessUnsignedShortValueToString; profile->to_text = &StumplessGenericValueToText; profile->to_value_list = &StumplessGenericValueToValueList; profile->to_xml = ((void *)0); StumplessAddValueProfile( profile );

  return STUMPLESS_SUCCESS;
}

StumplessStatusCode
StumplessSetConfiguration( StumplessConfiguration * new_configuration )
{
  if( configuration == ((void *)0) )
    return STUMPLESS_EMPTY_ARGUMENT;

  configuration = new_configuration;
  return STUMPLESS_SUCCESS;
}
